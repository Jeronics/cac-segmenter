#
#   1. image-> Get Contour-> punts doubles
#   2. double->Get affine coordinates contorn->doubles
    Alocate:
        M=([fila = n punts contorn, col = n punts control])

#   3. Recalcula coordenades doubles del contorn(Python)
#   4. doubles->Get omega1 i omega2-> enters
#   5. enters->Get affine coordinates Omega1->doubles
#   6. enters->Get affine coordinates Omega2->doubles
#   7. Calcular energia i gradient, actualitzar punts de control
#   8. retornar a punt 3

    # # If Image is an angle image, normalize..
    #
    # # Calculate Mean Value Coordinates
    #     # IN C PROGRAMMING
    #     # Get initial Contour From Initial Mask.
    #         # Add more points, smooth contour.
    #         # Calculate Angle of each point in the contour with the control points.
    #
    #         # Calculate Distance to each control point
    #     # Calculate Coordinates(Formula)
    # '''
    #     void cac_contour_get_interior_contour(
    #         int *contour_size,      /* output */
    #         float **contour_coord,  /* output */
    #         float **img,             /* input */
    #         int ncol,               /* input */
    #         int nrow,               /* input */
    #         int conn)               /* input */
    # '''
    # # WHILE    Vertex_previous-Vertex_new > tol     &&      iterations<MaxNumIterations
    #
    #     # IN C PROGRAMMING
    #     # ENTRADA: Contorn en python
    #     # SORTIDA:
    #         # - Llista pixels interns
    #         # - Llista pixels externs
    #         # - Coordenades afins pixels Interns
    #         # - Coordenades afins pixels Externs
    #     # Re-Define inner and outer points Omega1 and Omega2
    #         #   Recalculate Contour:
    #         #   Omega1: Distance function from the contour
    #         #   Omega2: Dilation(Omega1)\Omega1 ---> Distance
    #
    #     # Re-define Energy function
    #         #   Create Gradient Of energy function
    #
    #         #       Mean Model <----------------- IMPLEMENTAR CaLCUL DE ENERGIA I GRADIENT N-Dimensional
    #         #       Gaussian Model
    #         #       Histogram Model
    #
    #     # Minimize Energy function:
    #         #   Gradient decent on the gradient of the energy function
    #             #   Restriction: Vertex V_i runs along (P_m-V_i) line. (P_m is the mass point)
    #             #   IF the minimization step gets stuck (sign alternates):
    #                 #   Change Method --> Minimize Step
    #             #   ELSE
    #                 #   Keep a constant step in the minimization algorithm
    #
